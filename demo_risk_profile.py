#!/usr/bin/env python3

"""
Demo script showing how the Risk Profile appears in a complete roadmap.
"""

from roadmap_generator import RoadmapGenerator

def demo_risk_profile_roadmap():
    """Generate a demo roadmap showing the risk profile section."""
    
    print("üß† AMFAS Risk Profile Demo\n")
    
    generator = RoadmapGenerator()
    
    # Demo client with multiple risk factors
    client_data = {
        'name': 'Sarah Johnson',
        'gender': 'female',
        'dob': '1968-08-12'  # 55 years old
    }
    
    # Demo lab results
    lab_results = {
        'VIT_D25': 32,           # Low vitamin D
        'INFLAM_CRP': 2.8,       # Elevated inflammation
        'LIPID_CHOL': 210,       # Elevated cholesterol
        'METAB_HBA1C': 5.9,      # Pre-diabetic
        'THY_TSH': 3.2,          # Suboptimal thyroid
    }
    
    # Demo HHQ responses - Sarah has multiple risk factors
    hhq_responses = {
        # Traumatic factors
        'hh-concussion': True,
        'hh-car-accident-head': True,
        
        # Vascular factors  
        'hh-high-blood-pressure': True,
        'hh-atherosclerosis': True,
        
        # Toxic factors
        'hh-mold-exposure': True,
        'hh-chemical-exposure': True,
        
        # Glycotoxic factors
        'hh-diabetes': True,
        'hh-frequent-carb-sugar': True,
        
        # Atrophic factors
        'hh-postmenopausal': True,
        'hh-thyroid-disease': True,
        'hh-poor-diet': True,
        
        # Inflammatory factors
        'hh-chronic-pain': True,
        'hh-arthritis': True,
        'hh-autoimmune-disease': True,
        
        # Height and weight for BMI
        'hh-height': '5\'4"',
        'hh-weight': '165 lbs'
    }
    
    try:
        # Generate the roadmap
        roadmap = generator.generate_roadmap(client_data, lab_results, hhq_responses)
        
        # Extract and display the risk profile section
        if 'Other Insights From Your Past Medical History' in roadmap:
            start_idx = roadmap.find('Other Insights From Your Past Medical History')
            # Find the end of this section (start of next major section or end of file)
            potential_ends = []
            for marker in ['## **', '\n---\n\n*Generated by A Mind For All Seasons*']:
                end_idx = roadmap.find(marker, start_idx + 100)
                if end_idx != -1:
                    potential_ends.append(end_idx)
            
            if potential_ends:
                end_idx = min(potential_ends)
            else:
                end_idx = len(roadmap)
            
            risk_section = roadmap[start_idx:end_idx]
            
            print("üìä Risk Profile Section from Generated Roadmap:")
            print("=" * 60)
            print(risk_section)
            print("=" * 60)
            
            # Also show the BMI section that comes right before it
            bmi_start = roadmap.find('Body Weight Can Be A Predictor of Brain Health')
            if bmi_start != -1:
                bmi_section = roadmap[bmi_start:start_idx]
                print("\nüí™ BMI Section (for context):")
                print("-" * 40)
                print(bmi_section[:500] + "...\n")
                print("-" * 40)
            
        else:
            print("‚ùå Risk Profile section not found in roadmap")
            print("Available sections:")
            sections = []
            for line in roadmap.split('\n'):
                if line.startswith('## **'):
                    sections.append(line)
            for section in sections[:10]:  # Show first 10 sections
                print(f"  {section}")
                
    except Exception as e:
        print(f"‚ùå Error generating roadmap: {e}")
        import traceback
        traceback.print_exc()

def show_risk_calculations():
    """Show the behind-the-scenes risk calculations."""
    
    print("\nüî¨ Behind the Scenes: Risk Calculations")
    print("=" * 50)
    
    from risk_factor_mapping import RiskFactorMapper
    
    # Sarah's risk factors
    sarah_hhq = {
        'hh-concussion': True,           # Traumatic: 1.0
        'hh-car-accident-head': True,    # Traumatic: 1.0
        'hh-high-blood-pressure': True, # Vascular: 0.5
        'hh-atherosclerosis': True,     # Vascular: 1.0
        'hh-mold-exposure': True,       # Toxic: 1.0
        'hh-chemical-exposure': True,   # Toxic: 1.0
        'hh-diabetes': True,            # Glycotoxic: 1.0
        'hh-frequent-carb-sugar': True, # Glycotoxic: 0.5
        'hh-postmenopausal': True,      # Atrophic: 1.0
        'hh-thyroid-disease': True,     # Atrophic: 0.5
        'hh-poor-diet': True,           # Atrophic: 0.5
        'hh-chronic-pain': True,        # Inflammatory: 1.0
        'hh-arthritis': True,           # Inflammatory: 1.0
        'hh-autoimmune-disease': True,  # Inflammatory: 1.0
    }
    
    mapper = RiskFactorMapper()
    
    # Calculate risk scores
    risk_scores = mapper.calculate_risk_scores(sarah_hhq)
    risk_percentages = mapper.calculate_risk_percentages(risk_scores)
    risk_details = mapper.get_risk_factor_details(sarah_hhq)
    top_risks = mapper.get_top_risk_factors(risk_percentages, limit=3)
    
    print("Raw Risk Scores:")
    for category, score in risk_scores.items():
        print(f"  {category.title()}: {score}")
    
    print(f"\nTotal Risk Score: {sum(risk_scores.values())}")
    
    print("\nRisk Percentages:")
    for category, percentage in sorted(risk_percentages.items(), key=lambda x: x[1], reverse=True):
        print(f"  {category.title()}: {percentage:.1f}%")
    
    print(f"\nTop 3 Risk Categories:")
    for i, (category, percentage) in enumerate(top_risks, 1):
        print(f"  {i}. {category.title()}: {percentage:.1f}%")
    
    print("\nSpecific Risk Factors by Category:")
    for category, factors in risk_details.items():
        if factors:
            print(f"  {category.title()}: {', '.join(factors)}")

if __name__ == "__main__":
    demo_risk_profile_roadmap()
    show_risk_calculations() 